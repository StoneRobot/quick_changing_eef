// Generated by gencpp from file quick_changing_eef/ObjectPoseRequest.msg
// DO NOT EDIT!


#ifndef QUICK_CHANGING_EEF_MESSAGE_OBJECTPOSEREQUEST_H
#define QUICK_CHANGING_EEF_MESSAGE_OBJECTPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hirop_msgs/Pose.h>

namespace quick_changing_eef
{
template <class ContainerAllocator>
struct ObjectPoseRequest_
{
  typedef ObjectPoseRequest_<ContainerAllocator> Type;

  ObjectPoseRequest_()
    : obj()
    , pose()  {
    }
  ObjectPoseRequest_(const ContainerAllocator& _alloc)
    : obj(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obj_type;
  _obj_type obj;

   typedef  ::hirop_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectPoseRequest_

typedef ::quick_changing_eef::ObjectPoseRequest_<std::allocator<void> > ObjectPoseRequest;

typedef boost::shared_ptr< ::quick_changing_eef::ObjectPoseRequest > ObjectPoseRequestPtr;
typedef boost::shared_ptr< ::quick_changing_eef::ObjectPoseRequest const> ObjectPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace quick_changing_eef

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/kinetic/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/kinetic/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'hirop_msgs': ['/home/st/catkin_ws/src/HIROP_ROS-3.0/hirop_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a8be3862049ad2113f37ebda20c2769";
  }

  static const char* value(const ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a8be3862049ad21ULL;
  static const uint64_t static_value2 = 0x13f37ebda20c2769ULL;
};

template<class ContainerAllocator>
struct DataType< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quick_changing_eef/ObjectPoseRequest";
  }

  static const char* value(const ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string obj\n\
hirop_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: hirop_msgs/Pose\n\
geometry_msgs/Point position\n\
hirop_msgs/FixedAngle rpy\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: hirop_msgs/FixedAngle\n\
float64 R\n\
float64 P\n\
float64 Y\n\
";
  }

  static const char* value(const ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quick_changing_eef::ObjectPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "obj: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obj);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::hirop_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUICK_CHANGING_EEF_MESSAGE_OBJECTPOSEREQUEST_H
